<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[Java Spring Jdbc学习笔记]]></title>
    <url>%2F2018%2F12%2F02%2Ffirstblog%2F</url>
    <content type="text"><![CDATA[JavaSpring事务管理(1) 文件结构1234567.├── applicationContext.xml└── scheme ├── Dao.java ├── JdbcTest.java ├── TestDaoImpl.java ├── User.java JDBC配置省略部分代码applicationContext.xml1234567891011121314151617181920212223242526272829303132333435363738&lt;context:component-scan base-package="JDBC.scheme"&gt;&lt;/context:component-scan&gt;&lt;!-- 申明该xml配置文件“作用范围” --&gt;&lt;bean id="dataSource" class="org.springframework.jdbc.datasource.DriverManagerDataSource"&gt; &lt;property name="driverClassName" value="com.mysql.jdbc.Driver"&gt;&lt;/property&gt; &lt;property name="url" value="jdbc:mysql://localhost:3306/java?useSSL=false"&gt;&lt;/property&gt; &lt;property name="username" value="root"&gt;&lt;/property&gt; &lt;property name="password" value=""&gt;&lt;/property&gt;&lt;/bean&gt;&lt;!-- 配置需要连接数据库信息 --&gt; &lt;bean id="jdbcTemplate" class="org.springframework.jdbc.core.JdbcTemplate"&gt; &lt;property name="dataSource" ref="dataSource"&gt;&lt;/property&gt; &lt;/bean&gt; &lt;!-- 创建JdbcTemplate模版--&gt;&lt;/beans&gt;``` ## 创建实体类 User.java```javapublic class User &#123; //映射的事情由jdbctemplate来完成，前提是名字与数据库里面的要一一对应； private Integer id; private String name; private String sex; //toString方便查看对象属性 public String toString()&#123; return "myuser(id="+String.valueOf(id)+",name:"+name+",sex:"+sex+"date:"+"2018]"; &#125; public void setId(Integer id)&#123; this.id = id; &#125; public void setName(String name)&#123; this.name = name; &#125; public void setSex(String sex)&#123; this.sex = sex; &#125;&#125; JavaTemplate实例的创建TestDaoImpl.java1234567891011121314151617181920212223242526272829303132333435@Repository("testDao")//将该实例注入xml文件，交由Spring来管理，可用ApplicationContext对象的getBean("testDao")获取public class TestDaoImpl implements Dao &#123; @Autowired //使用xml文件中配置好的jdbc实例 private JdbcTemplate jdbcTemplate; @Override //对Dao的接口重写 public int update(String sql,Object[] param)&#123; return jdbcTemplate.update(sql,param); //返回更新的行数 &#125; @Override public List&lt;User&gt; query(String sql, Object[] param)&#123; //这里使用BeanPropertyRowMapper会比自己实现RowMapper要简单一些 // BeanPropertyRowMapper可以自动调用相应的setter对对象进行赋值 RowMapper&lt;User&gt; rowMapper = new BeanPropertyRowMapper&lt;User&gt;(User.class); return jdbcTemplate.query(sql,rowMapper,param); // RowMapper&lt;User&gt; userMapper = new UserMapper(); // return jdbcTemplate.query(sql,userMapper,param); &#125;&#125;//如果要用注释所用方法query,则需要自己实现一个RowMapper类class UserMapper implements RowMapper&lt;User&gt; &#123; //结果是以 行 为单位返回的 public User mapRow(ResultSet rs,int rowNum) throws SQLException &#123; User user = new User(); user.setId(rs.getInt("id")); user.setName(rs.getString("name")); user.setSex(rs.getString("sex")); return user; &#125;&#125; 测试JdbcTest.java1234567891011121314151617181920212223public class JdbcTest &#123; public static void main(String[] args)&#123; ApplicationContext appcon = new ClassPathXmlApplicationContext("/JDBC/applicationContext.xml");// ApplicationContext appcom = new FileSystemXmlApplicationContext("src/JDBC/applicationContext.xml"); Dao td = (Dao) appcon.getBean("testDao"); String insertSql = "insert into user values(?,?,?,NOW())"; Object param1[]=&#123;1,"Benji","boy"&#125;; Object param2[]=&#123;2,"Lee","boy"&#125;; Object param3[]=&#123;3,"Jimmy","boy"&#125;; Object param4[]=&#123;4,"Lily","girl"&#125;; Object param5[]=&#123;5,"Morry","girl"&#125;; td.update(insertSql,param1); td.update(insertSql,param2); td.update(insertSql,param3); td.update(insertSql,param4); td.update(insertSql,param5); String selectSql = "select * from user"; List&lt;User&gt; list = td.query(selectSql,null); for(User user:list)&#123; System.out.println(user); &#125; &#125;&#125; JdbcTemplate 常用方法 update() query() …和SQL语句差不多,可以查询官方文档]]></content>
      <tags>
        <tag>coding</tag>
      </tags>
  </entry>
</search>
